// Code generated by mockery v2.14.1. DO NOT EDIT.

package weather

import (
	context "context"

	model "github.com/closetotheworld/go-weather-service/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockWeatherService is an autogenerated mock type for the WeatherService type
type MockWeatherService struct {
	mock.Mock
}

// GetWeatherSummary provides a mock function with given fields: ctx, lat, lon
func (_m *MockWeatherService) GetWeatherSummary(ctx context.Context, lat float32, lon float32) (*model.WeatherResult, error) {
	ret := _m.Called(ctx, lat, lon)

	var r0 *model.WeatherResult
	if rf, ok := ret.Get(0).(func(context.Context, float32, float32) *model.WeatherResult); ok {
		r0 = rf(ctx, lat, lon)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.WeatherResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, float32, float32) error); ok {
		r1 = rf(ctx, lat, lon)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMockWeatherService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockWeatherService creates a new instance of MockWeatherService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockWeatherService(t mockConstructorTestingTNewMockWeatherService) *MockWeatherService {
	mock := &MockWeatherService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
